TestCase subclass: #AlgoChatTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:25'!test08UsuarioPuedeReanudarNotificacionesDePalabrasDeUnCanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat reanudarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.	algoChat publicarMensaje: 'libreta olvidada en la clase' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | libreta olvidada en la clase'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/26/2019 15:12'!test01UsuarioNuevoRecibeMensajesComoNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'pedro'.		algoChat enviarMensaje: 'hola juan' aUsuario: 'juan'.	algoChat enviarMensaje: 'como va' aUsuario: 'juan'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola juan | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'juan' resumidasALongitud: 4) equals: 'hola... | como...'.	self assert: (algoChat getNotificacionesDeUsuario: 'pedro') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test07UsuarioPuedePausarNotificacionesDePalabrasDeUnCanal	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'clase' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.		algoChat pausarPalabrasDeCanal: 'anuncios' paraUsuario: 'juan'.		algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer libreta' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @juan traer libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | cartuchera olvidada en la clase'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test04UsuarioAgregadoAConversacionRecibeNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat crearConversacionConUsuarios: 'juan,maria,jose'.		algoChat publicarMensaje: 'hola' enConversacion: 'juan,maria,jose'.	algoChat publicarMensaje: 'como va' enConversacion: 'juan,maria,jose'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'hola | como va'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: 'hola | como va'.	self assert: (algoChat getMensajesDeConversacion: 'juan,maria,jose') equals: 'hola | como va'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/26/2019 15:06'!test02EnviarMensajesACanalGuardaLosMensajes	| algoChat |	algoChat := AlgoChat new.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.	algoChat publicarMensaje: 'tp0 publicado' enCanal: 'anuncios'.	algoChat publicarMensaje: 'fecha limite 30/8' enCanal: 'anuncios'.	algoChat publicarMensaje: 'se entrega por campus' enCanal: 'anuncios'.		self assert: (algoChat mensajesDelCanal: 'anuncios') equals: 'tp0 publicado | fecha limite 30/8 | se entrega por campus'.	self assert: (algoChat mensajesDelCanal: 'anuncios' resumidosALongitud: 3) equals: 'tp0... | fec... | se ...'.	self assert: (algoChat mensajesDelCanal: 'anuncios' resumidosALongitud: 2) equals: 'tp... | fe... | se...'.	self assert: (algoChat mensajesDelCanal: 'consultas') equals: ''.	! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/23/2019 23:48'!test03UsuarioAgregadoACanalNoRecibeNotificaciones	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarCanalConNombre: 'anuncios'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat publicarMensaje: 'clase de hoy suspendida' enCanal: 'anuncios'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 01:46'!test00AlgoChatVacioNoTieneUsuariosNiCanales	| algoChat |	algoChat := AlgoChat new.	self assert: algoChat getCantidadUsuarios equals: 0.	self assert: algoChat getCantidadDeCanales equals: 0.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test05UsuarioEnCanalRecibeNotificacionesCuandoMencionanSuNombre	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarUsuarioConNombre: 'jose'.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.	algoChat agregarUsuario: 'jose' alCanal: 'anuncios'.	algoChat publicarMensaje: 'por favor @maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: 'hoy no hace falta que venga @pedro a clase' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan traer la libreta' enCanal: 'anuncios'.	algoChat publicarMensaje: '@juan como estas?' enCanal: 'consultas'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: 'por favor @maria y @juan venir a clase hoy | @juan traer la libreta'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: 'por favor @maria y @juan venir a clase hoy'.	self assert: (algoChat getNotificacionesDeUsuario: 'jose') equals: ''.! !!AlgoChatTest methodsFor: 'tests' stamp: 'a 8/25/2019 23:24'!test06UsuarioPuedeElegirPalabrasParaSerNotificado	| algoChat |	algoChat := AlgoChat new.	algoChat agregarUsuarioConNombre: 'juan'.	algoChat agregarUsuarioConNombre: 'maria'.	algoChat agregarCanalConNombre: 'anuncios'.	algoChat agregarCanalConNombre: 'consultas'.		algoChat agregarUsuario: 'juan' alCanal: 'anuncios'.	algoChat agregarUsuario: 'juan' alCanal: 'consultas'.	algoChat agregarUsuario: 'maria' alCanal: 'anuncios'.		algoChat agregarPalabraClave: 'clase' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'parcial' alUsuario: 'juan'.	algoChat agregarPalabraClave: 'libreta' alUsuario: 'maria'.	algoChat publicarMensaje: '@maria y @juan venir a clase hoy' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro aprobo el parcial' enCanal: 'anuncios'.	algoChat publicarMensaje: '@pedro traer libreta' enCanal: 'anuncios'.	algoChat publicarMensaje: 'cartuchera olvidada en la clase' enCanal: 'consultas'.	algoChat publicarMensaje: 'libreta perdida' enCanal: 'consultas'.		self assert: (algoChat getNotificacionesDeUsuario: 'juan') equals: '@maria y @juan venir a clase hoy | @pedro aprobo el parcial | cartuchera olvidada en la clase'.	self assert: (algoChat getNotificacionesDeUsuario: 'maria') equals: '@maria y @juan venir a clase hoy | @pedro traer libreta'.! !!AlgoChatTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:46'!test09UsuarioNoCreadoSeLeEnviaUnMensaje	|algoChat|	algoChat := AlgoChat new.		algoChat enviarMensaje: 'hola' aUsuario: 'juaquin'.		self assert: (algoChat getCantidadUsuarios ) equals: 1.	self assert: (algoChat getNotificacionesDeUsuario: 'juaquin') equals: 'hola'.	! !TestCase subclass: #BaseDeUsuariosTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!BaseDeUsuariosTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 01:38'!test01BaseDeUsuariosDeberiaDevolverElUsuarioBuscado	! !!BaseDeUsuariosTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 01:51'!test02BaseDeUsuariosAgregaLaCantidadDeUsuariosAdecuada	|usuarios|		usuarios := BaseDeUsuarios new.		usuarios agregar: 'pedro'.	usuarios agregar: 'juaquin'.		self assert: (usuarios getCantidadUsuarios) equals: 2 .! !!BaseDeUsuariosTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 01:33'!test00BaseDeUsuariosSeCreaSinUsuarios	|usuarios|	usuarios := BaseDeUsuarios new.		self assert: (usuarios getCantidadUsuarios) equals: 0.! !TestCase subclass: #CanalTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!CanalTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/15/2019 15:20'!test00CanalAgregaUsuariosAlCanalYLesEnviaMensajes	|canal usuario1 usuario2|	usuario1 := Usuario conNombre: 'maria'.	usuario2 := Usuario conNombre: 'norma'.			canal := Canal conNombre: 'anuncios'.	canal agregarUsuario: usuario1.	canal agregarUsuario: usuario2.		canal publicarMensaje: 'hola'.		self assert:(usuario1 getNotificaciones) equals:'' .	self assert:(usuario2 getNotificaciones ) equals:''.	self assert:(canal getNotificaciones ) equals: 'hola'.! !!CanalTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/15/2019 15:21'!test01CanalAgregaUsuariosAlCanalYLesEnviaMensajesALosUsuariosConPalabrasClave	|canal usuario1 usuario2|	usuario1 := Usuario conNombre: 'maria'.	usuario2 := Usuario conNombre: 'norma'.	usuario1 agregarPalabraClave: 'como'.		canal := Canal conNombre: 'anuncios'.	canal agregarUsuario: usuario1.	canal agregarUsuario: usuario2.		canal publicarMensaje: 'hola como estas'.		self assert:(usuario1 getNotificaciones) equals:'hola como estas' .	self assert:(usuario2 getNotificaciones ) equals:''.	self assert:(canal getNotificaciones ) equals: 'hola como estas'.! !TestCase subclass: #GrupoTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!GrupoTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:33'!test01DeberiaEnviarseLosMensajesATodosLosUsuariosDelGrupo	|usuario1 usuario2 usuario3 grupo mensajeEsperado usuarios|		mensajeEsperado := 'ma√±ana es viernes!!'.		usuario1:= Usuario conNombre: 'fernanda'.	usuario2 := Usuario conNombre: 'fernando'.	usuario3 := Usuario conNombre: 'maria'.		usuarios := OrderedCollection new.	usuarios add: usuario1.	usuarios add: usuario2.	usuarios add: usuario3.		grupo := Grupo conNombre: 'fernanda,fernando,maria' yParticipantes: usuarios. 	grupo publicarMensaje: 'ma√±ana es viernes!!'.		self assert: (usuario1 getNotificaciones ) equals: mensajeEsperado.	self assert: (usuario2 getNotificaciones ) equals: mensajeEsperado.	self assert: (usuario3 getNotificaciones ) equals: mensajeEsperado.	self assert: (grupo getNotificaciones ) equals: mensajeEsperado.! !!GrupoTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 16:59'!test00GrupoDeberiaDevolverTrueAlCoincidirNombre	|grupo nombre usuarios|		nombre := 'juan,pedro'.	usuarios := OrderedCollection new.	grupo := Grupo conNombre: 'juan,pedro' yParticipantes: usuarios.		self assert: (grupo coincideNombre: nombre). ! !!GrupoTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 16:59'!test00GrupoDeberiaDevolverFalseAlNoCoincidirNombre	|grupo nombre usuarios|		nombre := 'juaquin,pedro'.	usuarios := OrderedCollection new.	grupo := Grupo conNombre: 'juan,pedro' yParticipantes: usuarios.		self assert: (grupo coincideNombre: nombre)not. ! !TestCase subclass: #MensajeTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!MensajeTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:33'!test00UsuarioNoDeberiaRecibirNingunaMensajeSiNoSeLeEnvio	|usuario mensajeEsperado|	mensajeEsperado := ''.		usuario := Usuario conNombre: 'juan'.		self assert: (usuario getNotificaciones) equals: mensajeEsperado.	! !!MensajeTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:16'!test01DeberiaResumirCorrectamenteConLimiteDeCaracteresMayorAlMensaje	|usuario mensajeEsperado|	usuario := Usuario conNombre: 'roberto'.	usuario enviarMensaje: 'hola'.	usuario enviarMensaje: 'como estas?'.		mensajeEsperado := 'hola | como ...'.		self assert: (usuario getNotificacionesResumidasConLongitud: 5) equals: mensajeEsperado.! !!MensajeTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:17'!test03DeberiaResumirLosMensajesCorrectamente	|usuario mensajeEsperado|	usuario := Usuario conNombre: 'roberto'.	usuario enviarMensaje: 'hola'.	usuario enviarMensaje: 'como estas?'.		mensajeEsperado := 'hol... | com...'.		self assert: (usuario getNotificacionesResumidasConLongitud: 3) equals: mensajeEsperado.! !!MensajeTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:33'!test02DeberiaUsuarioRecibirTodasLasNotificacionesQueSeLeEnvio	|usuario mensajeEsperado|	usuario := Usuario conNombre: 'roberto'.	usuario enviarMensaje: 'hola'.	usuario enviarMensaje: '¬øcomo estas?'.		mensajeEsperado := 'hola | ¬øcomo estas?'.		self assert: (usuario getNotificaciones) equals: mensajeEsperado.! !TestCase subclass: #MensajeriaTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!MensajeriaTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:33'!test01MensajeriaDeberiaEnviarMensajeCorrectamente	|mensajeria  usuarios usuarioUno usuarioDos usuarioTres mensajeEsperado|		mensajeEsperado := 'ganamoos'.	usuarios := OrderedCollection new.	 	usuarios add: ( usuarioUno := (Usuario conNombre: 'victoria')).	usuarios add: ( usuarioDos := Usuario conNombre: 'lucia').	usuarios add: ( usuarioTres := Usuario conNombre: 'paula').		mensajeria := Mensajeria new.		mensajeria enviarMensaje: 'ganamoos' aLosUsuarios: usuarios.		self assert: (usuarioUno getNotificaciones) equals: mensajeEsperado.	self assert: (usuarioDos getNotificaciones ) equals: mensajeEsperado .	self assert: (usuarioTres getNotificaciones ) equals: mensajeEsperado .! !!MensajeriaTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:33'!test00MensajeriaDeberiaEnviarDosMensajesCorrectamente	|mensajeria  usuarioReceptor mensajeEsperado|		mensajeEsperado := 'goool | buuu'.	 	usuarioReceptor := Usuario conNombre: 'fernando'.	mensajeria := Mensajeria new.		mensajeria enviarMensajePrivado: 'goool' alUsuario: usuarioReceptor.	mensajeria enviarMensajePrivado: 'buuu' alUsuario: usuarioReceptor. 		self assert: (usuarioReceptor getNotificaciones) equals: mensajeEsperado.! !TestCase subclass: #SalaDeChatTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!SalaDeChatTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 17:05'!test02SalaDeChatsDeberiaEnviarTrueAlEncontrarElGrupo	| salas canalBuscado|	salas := SalaDeChat new.		salas agregarCanal: 'anuncios'.	salas crearGrupoCon: (Usuario new) yConNombre: 'rocio'.		canalBuscado := salas buscar:  'rocio'. 		self assert: (canalBuscado coincideNombre: 'rocio').! !!SalaDeChatTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 03:15'!test01SalaDeChatsDeberiaEnviarTrueAlEncontrarElCanal	| salas canalBuscado|	salas := SalaDeChat new.		salas agregarCanal: 'anuncios'.	salas crearGrupoCon: (Usuario new) yConNombre: 'rocio'.		canalBuscado := salas buscar: 'anuncios'. 		self assert: (canalBuscado coincideNombre: 'anuncios').! !!SalaDeChatTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 03:26'!test00LasSalasDeChatNoDebenTenerCanalesNiGruposCuandoSecrean	|salas|	salas := SalaDeChat new.		self assert: (salas getCantidadDeSalas) equals: 0.! !TestCase subclass: #UsuarioTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'AlgoChat-Tests'!!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 17:27'!test01UsuarioDevuelveTrueConNombresIguales	|usuario nombre|		nombre:= 'marta'.	usuario := Usuario conNombre: 'marta'.		self assert: (usuario coincideNombre: nombre).! !!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 01:59'!test05DeberiaEncontrarLaPalabraClaveEnElMensaje	|usuario mensaje|	usuario := Usuario conNombre: 'fernando'.	usuario agregarPalabraClave: 'lluvia'.	usuario agregarPalabraClave: 'sol'.	usuario agregarPalabraClave: 'tarde'.		mensaje:= 'hermoso el dia, no hay ni una nube esta tarde'.		self assert: (usuario buscarPalabraClave: mensaje).! !!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 18:33'!test00UsuarioCreadoConNombrePeroSinNotificaciones	|usuario nombreEsperado|		nombreEsperado := 'nicolas'.	usuario := Usuario conNombre: 'nicolas'.		self assert: (usuario getNotificaciones) equals: ''.	self assert: (usuario coincideNombre: nombreEsperado).! !!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 17:30'!test02UsuarioDevuelveFalseSiNoCoincidenNombres	|usuario nombre|		nombre:= 'martin'.	usuario := Usuario conNombre: 'marta'.		self assert: (usuario coincideNombre: nombre)not.! !!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 17:31'!test04UsuarioDevuelveTrueSiLoMencionan	|mensaje usuario|		mensaje := 'hola @juan como estas?'.	usuario := Usuario conNombre: 'juan'.		self assert: (usuario buscarMencion: mensaje).! !!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/13/2019 17:30'!test03UsuarioDevuelveFalseSiNoLoMencionan	|mensaje usuario|		mensaje := 'hola @martin como estas?'.	usuario := Usuario conNombre: 'juan'.		self assert: (usuario buscarMencion: mensaje)not.! !!UsuarioTest methodsFor: 'tests' stamp: 'veronicaleguizamon 9/14/2019 02:00'!test06DeberiaDevolverFalseAlNoContarConPalabraClave	|usuario mensaje|	usuario := Usuario conNombre: 'fernando'.	usuario agregarPalabraClave: 'lluvia'.	usuario agregarPalabraClave: 'sol'.		mensaje:= 'hermoso el dia, no hay ni una nube esta tarde'.		self assert: (usuario buscarPalabraClave: mensaje) not.! !